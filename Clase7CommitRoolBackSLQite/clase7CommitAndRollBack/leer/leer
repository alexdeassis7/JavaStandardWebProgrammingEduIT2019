Cuando desarrollamos aplicaciones en java con base de datos debemos tener cuidado en que se cumplan un conjunto de caracter√≠sticas conocida como ACID (Atomicidad, Consistencia, Aislamiento, Durabilidad), en el caso de este post nos centraremos en la Atomicidad y Consistencia

Atomicidad: es la propiedad que asegura que la operaci√≥n se ha realizado o no, y por lo tanto ante un fallo del sistema no puede quedar a medias. Se dice que una operaci√≥n es at√≥mica cuando es imposible para otra parte de un sistema encontrar pasos intermedios. Si esta operaci√≥n consiste en una serie de pasos, todos ellos ocurren o ninguno. Por ejemplo, en el caso de una transacci√≥n bancaria o se ejecuta tanto el dep√≥sito como la deducci√≥n o ninguna acci√≥n es realizada. [Wikipedia]
Consistencia: Integridad. Es la propiedad que asegura que s√≥lo se empieza aquello que se puede acabar. Por lo tanto se ejecutan aquellas operaciones que no van a romper las reglas y directrices de integridad de la base de datos. La propiedad de consistencia sostiene que cualquier transacci√≥n llevar√° a la base de datos desde un estado v√°lido a otro tambi√©n v√°lido. ‚ÄúLa Integridad de la Base de Datos nos permite asegurar que los datos son exactos y consistentes, es decir que est√©n siempre intactos, sean siempre los esperados y que de ninguna manera cambien ni se deformen. De esta manera podemos garantizar que la informaci√≥n que se presenta al usuario ser√° siempre la misma.‚Äù [Wikipedia]

Planteando una situaci√≥n para este tutorial

Si tenemos una serie de sentencias SQL INSERT por ejecutar y por un motivo XYZ üôÇ surge un error que no permite que se completen todas estas sentencias nos encontramos con el problema de que hasta el punto que se produjo el error, los INSERT se ejecutaron y se guardaron nuevos registros en la base de datos, entonces estar√≠amos violando los criterios de Atomicidad y de Consistencia porque no primeramente no se completo la transacci√≥n en su totalidad pero tenemos nuevos registros en la base de datos pero estos registros est√°n incompletos.

¬øComo podemos solucionar este problema?

Necesitamos

Java
IDE Netbeans 7.x o Eclipse
Libreria MySQL JDBC Driver
MySQL
Nivel: Intermedio

Tiempo. 15 minutos



Le a√±adimos el conector JDBC al proyecto
Tenemos una clase llamada Database.java que nos permite conectarse a la base de datos MySQL
Tenemos dos clases Main, JNoRollback y JRollback, en la primera clase se implementara las instrucciones INSERT sin el uso de Commit y Rollback , en la segunda clase con el uso de estos 2 m√©todos, el fin es apreciar mejor que pasa cuando se produce un error al ejecutar estas transacciones.





